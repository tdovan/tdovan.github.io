global:

  prometheus:
    enabled: true # If false, Prometheus will not be installed
    fqdn: http://cost-analyzer-prometheus-server.default.svc.cluster.local #example fqdn. Ignored if enabled: true

  grafana:
    enabled: true # If false, Grafana will not be installed
    domainName: cost-analyzer-grafana.default.svc.cluster.local #example grafana domain Ignored if enabled: true
    scheme: "http" # http or https, for the domain name above.
    proxy: true # If true, the kubecost frontend will route to your grafana through its service endpoint
    
  notifications:
    slack: # Write to a webhook.
      enabled: false # Allow kubecost to write to your slackbot.
      webhook: https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX # Example Webhook
    alertmanager: # Supply an alertmanager FQDN to receive notifications from the app.
      enabled: false # If true, allow kubecost to write to your alertmanager
      fqdn: http://cost-analyzer-prometheus-server.default.svc.cluster.local #example fqdn. Ignored if prometheus.enabled: true

  podAnnotations: {}
    # iam.amazonaws.com/role: role-arn

kubecostChecks:
  image: "ajaytripathy/kubecost-checks"

kubecostFrontend:
  image: "ajaytripathy/kubecost-frontend"

kubecost:
  image: "ajaytripathy/kubecost"

kubecostModel:
  image: "ajaytripathy/kubecost-cost-model"

kubecostInit:
  image: "ajaytripathy/kubecost-init"

ingress:
  enabled: false
  annotations: 
    kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  paths: ["/"] # There's no need to route specifically to the pods-- we have an nginx deployed that handles routing
  hosts:
    - cost-analyzer.local
  tls: []
  #  - secretName: cost-analyzer-tls
  #    hosts:
  #      - cost-analyzer.local

# If true, enable creation of NetworkPolicy resources.
networkPolicy:
  enabled: false
#
# Define persistence volume for cost-analyzer
persistentVolume:
  size: 0.2Gi
  enabled: true # Note that setting this to false means configurations will be wiped out on pod restart.

service:
  type: LoadBalancer

prometheus:
  extraScrapeConfigs: |
    - job_name: kubecost
      honor_labels: true
      scrape_interval: 1m
      scrape_timeout: 10s
      metrics_path: /metrics
      scheme: http
      dns_sd_configs:
      - names:
        - kubecost-cost-analyzer
        type: 'A'
        port: 9003
  server:
    persistentVolume:
      size: 32Gi
      enabled: true
  alertmanager:
    persistentVolume:
      enabled: true
  pushgateway:
    persistentVolume:
      enabled: true
  serverFiles:
    rules:
      groups:
        - name: CPU
          rules:
            - expr: sum(rate(container_cpu_usage_seconds_total{container_name!=""}[5m]))
              record: cluster:cpu_usage:rate5m
            - expr: rate(container_cpu_usage_seconds_total{container_name!=""}[5m])
              record: cluster:cpu_usage_nosum:rate5m

serviceMonitor:
  enabled: false
  additionalLabels: {}

prometheusRule:
  enabled: false
  additionalLabels: {}

supportNFS: true

grafana:
  sidecar:
    dashboards:
      enabled: true 
    datasources:
      enabled: true
      defaultDatasourceEnabled: true
